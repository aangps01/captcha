{"version":3,"sources":["../src/jquery-captcha.js"],"names":["$","fn","captcha","settings","_getHtml","ajax","method","url","captchaEndpoint","data","get","c","styleName","_registerUserInputBlurValidation","instance","_getInstance","options","userInputID","on","captchaCode","trim","this","val","length","self","validationUrl","i","success","isCorrect","reloadImage","trigger","_getScript","extend","dataType","cache","_loadScriptIncludes","done","captchaId","_onLoadScriptsSuccess","undefined","window","botdetect","getInstanceByStyleName","_displayHtml","captchaHtml","element","html","replace","Error","init","getCaptchaId","jQuery"],"mappings":"CAAC,SAASA,GACR,YAEAA,GAAEC,GAAGC,QAAU,SAASC,GAkBtB,QAASC,KACP,MAAOJ,GAAEK,MACPC,OAAQ,MACRC,IAAKJ,EAASK,gBACdC,MACEC,IAAK,OACLC,EAAGC,KAOT,QAASC,KACP,GAAIC,GAAWC,GACVD,IAELd,EAAE,IAAMc,EAASE,QAAQC,aAAaC,GAAG,OAAQ,WAC/C,GAAIC,GAAcnB,EAAEoB,KAAKpB,EAAEqB,MAAMC,MACjC,IAA2B,IAAvBH,EAAYI,OAAhB,CAEA,GAAIC,GAAOH,IACXrB,GAAEK,MACAC,OAAQ,MACRC,IAAKO,EAASW,cACdhB,MACEiB,EAAGP,GAELQ,QAAS,SAAUC,GACZA,GACHd,EAASe,cAEX7B,EAAEwB,GAAMM,QAAQ,mBAAoBF,UAO5C,QAASG,GAAWxB,EAAKS,GAMvB,MALAA,GAAUhB,EAAEgC,QACVC,SAAU,SACVC,OAAO,EACP3B,IAAKA,GACJS,OACIhB,EAAEK,KAAKW,GAIhB,QAASmB,KAEPJ,EADuB5B,EAASK,gBAAkB,uBACnB0B,OAAO,IAAQE,KAAK,WACjD,GAAIC,GAAYrC,EAAE,aAAeY,GAAWU,KAE5CS,GAD2B5B,EAASK,gBAAkB,8BAAgCI,EAAY,MAAQyB,EAAY,SACrFD,KAAKE,KAK1C,QAASA,KACPzB,IAIF,QAASE,KACP,WAA6BwB,KAArBC,OAAOC,UACXD,OAAOC,UAAUC,uBAAuB9B,GACxC,KAIN,QAAS+B,KACPvC,EAASD,EAASK,gBAAiBI,GAAWwB,KAAK,SAASQ,GAC1DC,EAAQC,KAAKF,EAAYG,QAAQ,uBAAwB,KACzDZ,MA1FJ,GAAIU,GAAUxB,IAEd,IAAuB,IAAnBwB,EAAQtB,OACV,KAAM,IAAIyB,OAAM,2CAGlB,KAAK7C,IAAaA,EAASK,gBACzB,KAAM,IAAIwC,OAAM,2CAIlB7C,GAASK,gBAAkBL,EAASK,gBAAgBuC,QAAQ,QAAS,GAErE,IAAInC,GAAYiC,EAAQpC,KAAK,aAAeoC,EAAQpC,KAAK,aAAe,gBAwGxE,OAtBAoC,GAAQI,KAAO,WAEb,MADAN,KACOE,GAITA,EAAQK,aAAe,WACrB,GAAIpC,EACJ,QAAKA,EAAWC,KACPD,EAASuB,UAFC,MAQrBQ,EAAQhB,YAAc,WACpB,GAAIf,GAAWC,GACXD,IACFA,EAASe,eAINgB,EAAQI,SAGjBE","file":"jquery-captcha.min.js","sourcesContent":["(function($) {\n  'use strict';\n  \n  $.fn.captcha = function(settings) {\n    \n    var element = this;\n    \n    if (element.length === 0) {\n      throw new Error('Captcha html element cound not be found.');\n    }\n\n    if (!settings || !settings.captchaEndpoint) {\n      throw new Error('The captchaEndpoint setting is required.');\n    }\n    \n    // normalize captcha endpoint path\n    settings.captchaEndpoint = settings.captchaEndpoint.replace(/\\/+$/g, '');\n    \n    var styleName = element.data('stylename') ? element.data('stylename') : 'defaultCaptcha';\n    \n    // get captcha html markup\n    function _getHtml() {\n      return $.ajax({\n        method: 'GET',\n        url: settings.captchaEndpoint,\n        data: {\n          get: 'html',\n          c: styleName\n        }\n      });\n    };\n    \n    // ajax validate captcha on blur event and trigging the \n    // custom 'validatecaptcha' event to fire the validation result\n    function _registerUserInputBlurValidation() {\n      var instance = _getInstance();\n      if (!instance) { return; }\n      \n      $('#' + instance.options.userInputID).on('blur', function() {\n        var captchaCode = $.trim($(this).val());\n        if (captchaCode.length === 0) { return; }\n\n        var self = this;\n        $.ajax({\n          method: 'GET',\n          url: instance.validationUrl,\n          data: {\n            i: captchaCode\n          },\n          success: function (isCorrect) {\n            if (!isCorrect) {\n              instance.reloadImage();\n            }\n            $(self).trigger('validatecaptcha', [isCorrect]);\n          }\n        });\n      });\n    };\n    \n    // a custom of $.getScript(), which lets changing the options\n    function _getScript(url, options) {\n      options = $.extend({\n        dataType: 'script',\n        cache: false,\n        url: url\n      }, options || {});\n      return $.ajax(options);\n    };\n    \n    // load botdetect scripts and execute them\n    function _loadScriptIncludes() {\n      var scriptIncludeUrl = settings.captchaEndpoint + '?get=script-include';\n      _getScript(scriptIncludeUrl, { cache: true }).done(function() {\n        var captchaId = $('#BDC_VCID_' + styleName).val();\n        var initScriptIncludeUrl = settings.captchaEndpoint + '?get=init-script-include&c=' + styleName + '&t=' + captchaId + '&cs=2';\n        _getScript(initScriptIncludeUrl).done(_onLoadScriptsSuccess);\n      });\n    };\n    \n    // fire the custom event when botdetect scripts are loaded\n    function _onLoadScriptsSuccess() {\n      _registerUserInputBlurValidation();\n    }\n    \n    // get botdetect captcha client-side instance\n    function _getInstance() {\n      return (window.botdetect !== undefined) \n        ? window.botdetect.getInstanceByStyleName(styleName)\n        : null;\n    };\n    \n    // display captcha html markup in view\n    function _displayHtml() {\n      _getHtml(settings.captchaEndpoint, styleName).done(function(captchaHtml) {\n        element.html(captchaHtml.replace(/<script.*<\\/script>/g, ''));\n        _loadScriptIncludes();\n      });\n    }\n    \n    // plugin initialization - we display the captcha html markup in view\n    element.init = function() {\n      _displayHtml();\n      return element;\n    };\n    \n    // captcha id for validating captcha at server-side\n    element.getCaptchaId = function() {\n      var instance, id = null;\n      if ((instance = _getInstance())) {\n        return instance.captchaId;\n      }\n      return id;\n    };\n    \n    // reload new captcha image\n    element.reloadImage = function() {\n      var instance = _getInstance();\n      if (instance) {\n        instance.reloadImage();\n      }\n    };\n\n    return element.init();\n  };\n  \n}(jQuery));\n"]}