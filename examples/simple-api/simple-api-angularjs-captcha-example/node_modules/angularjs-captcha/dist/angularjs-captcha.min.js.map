{"version":3,"sources":["../src/angularjs-captcha.js"],"names":["angular","captchaSettings","configuredSettings","captchaEndpoint","setSettings","settings","$get","extend","replace","captchaHelper","$http","$rootScope","getScript","url","onLoadSuccess","method","then","response","Function","data","setTimeout","error","Error","loadScriptIncludes","element","scriptIncludeUrl","self","this","captchaId","querySelector","captchaStyleName","value","initScriptIncludeUrl","botdetectCaptchaDirective","restrict","link","scope","attrs","styleName","stylename","params","get","c","html","correctCaptchaDirective","Captcha","require","ctrls","captcha","captchaCode","ngModel","$setValidity","bind","val","validate","isHuman","reloadImage","captchaService","undefined","window","botdetect","getInstance","getInstanceByStyleName","prototype","validationUrl","i","module","provider","factory","directive"],"mappings":"CAEA,SAAUA,GACR,YAGA,SAASC,KACP,GAAIC,MACAD,GACEE,gBAAiB,GAGvB,QACEC,YAAa,SAASC,GACpBH,EAAqBG,GAGvBC,KAAM,WAIJ,MAHAN,GAAQO,OAAON,EAAiBC,GAEhCD,EAAgBE,gBAAkBF,EAAgBE,gBAAgBK,QAAQ,QAAS,IAC5EP,IAMb,QAASQ,GAAcC,EAAOC,EAAYV,GACxC,OACEW,UAAW,SAASC,EAAKC,GACvBJ,GACEK,OAAQ,MACRF,IAAKA,IAEJG,KAAK,SAASC,GACL,GAAIC,UAASD,EAASE,QACD,kBAAlBL,IACTM,WAAWN,EAAe,MAE3B,SAASO,GACV,KAAM,IAAIC,OAAMD,EAAMF,SAI5BI,mBAAoB,SAASC,GAC3B,GAAIC,GAAmBxB,EAAgBE,gBAAkB,sBACrDuB,EAAOC,IACXA,MAAKf,UAAUa,EAAkB,WAC/B,GAAIG,GAAYJ,EAAQ,GAAGK,cAAc,aAAelB,EAAWmB,kBAAkBC,MACjFC,EAAuB/B,EAAgBE,gBAAkB,8BAAgCQ,EAAWmB,iBAAmB,MAAQF,EAAY,SAC/IF,GAAKd,UAAUoB,OAOvB,QAASC,GAA0BtB,EAAYD,EAAOT,EAAiBQ,GACrE,OACEyB,SAAU,IACVC,KAAM,SAASC,EAAOZ,EAASa,GAC7B,GAAIC,GAAYD,EAAME,UAAYF,EAAME,UAAY,gBAGpD5B,GAAWmB,iBAAmBQ,EAE9B5B,GACEK,OAAQ,MACRF,IAAKZ,EAAgBE,gBACrBqC,QACEC,IAAK,OACLC,EAAGJ,KAGJtB,KAAK,SAASC,GAEbO,EAAQmB,KAAK1B,EAASE,KAAKX,QAAQ,uBAAwB,KAG3DC,EAAcc,mBAAmBC,IAChC,SAASH,GACV,KAAM,IAAIC,OAAMD,EAAMF,UAOhC,QAASyB,GAAwBC,GAC/B,OACEX,SAAU,IACVY,QAAS,UACTX,KAAM,SAASC,EAAOZ,EAASa,EAAOU,GACpC,GAAIC,GACAC,EACAC,EAAUH,CAEdG,GAAQC,aAAa,oBAAoB,GAGzC3B,EAAQ4B,KAAK,OAAQ,YACnBH,EAAczB,EAAQ6B,SAMjBL,IACHA,EAAU,GAAIH,IAGhBG,EAAQM,SAASL,GACdjC,KAAK,SAASuC,GACTA,EAEFL,EAAQC,aAAa,oBAAoB,IAGzCD,EAAQC,aAAa,oBAAoB,GACzCH,EAAQQ,sBAStB,QAASC,GAAe9C,EAAYD,GAClC,GAAImC,GAAU,WACZ,OAAyBa,KAArBC,OAAOC,UACT,KAAM,IAAItC,OAAM,4HAGlBK,MAAKG,iBAAmBnB,EAAWmB,iBACnCH,KAAKC,UAAYiB,EAAQgB,cAAcjC,UA8BzC,OA3BAiB,GAAQgB,YAAc,WACpB,MAAOlD,GAAWmB,iBACd6B,OAAOC,UAAUE,uBAAuBnD,EAAWmB,kBACnD,MAGNe,EAAQkB,UAAUT,SAAW,SAASL,GAcpC,MAbcvC,IACVK,OAAQ,MACRF,IAAKgC,EAAQgB,cAAcG,cAC3BxB,QACEyB,EAAGhB,KAGJjC,KAAK,SAASC,GACb,MAAOA,GAASE,MACf,SAASE,GACV,MAAOA,GAAMF,QAMrB0B,EAAQkB,UAAUP,YAAc,WAC9BX,EAAQgB,cAAcL,eAGjBX,EAGT7C,EACGkE,OAAO,uBACPC,SAAS,kBAAmBlE,GAC5BmE,QAAQ,iBACP,QACA,aACA,kBACA3D,IAED2D,QAAQ,WACP,aACA,QACAX,IAEDY,UAAU,oBACT,aACA,QACA,kBACA,gBACApC,IAEDoC,UAAU,kBACT,UACAzB,KAGHe,OAAO3D","file":"angularjs-captcha.min.js","sourcesContent":["/* BotDetect CAPTCHA AngularJS Module */\r\n\r\n(function(angular) {\r\n  'use strict';\r\n\r\n  // BotDetect Captcha module settings.\r\n  function captchaSettings() {\r\n    var configuredSettings = {},\r\n        captchaSettings = {\r\n          captchaEndpoint: ''\r\n        };\r\n\r\n    return {\r\n      setSettings: function(settings) {\r\n        configuredSettings = settings;\r\n      },\r\n\r\n      $get: function() {\r\n        angular.extend(captchaSettings, configuredSettings);\r\n        // normalize captcha endpoint path\r\n        captchaSettings.captchaEndpoint = captchaSettings.captchaEndpoint.replace(/\\/+$/g, '');\r\n        return captchaSettings;\r\n      }\r\n    };\r\n  }\r\n\r\n  // Captcha helper that provides useful functions.\r\n  function captchaHelper($http, $rootScope, captchaSettings) {\r\n    return {\r\n      getScript: function(url, onLoadSuccess) {\r\n        $http({\r\n          method: 'GET',\r\n          url: url\r\n        })\r\n          .then(function(response) {\r\n            var f = new Function(response.data); f();\r\n            if (typeof onLoadSuccess === 'function') {\r\n              setTimeout(onLoadSuccess, 200);\r\n            }\r\n          }, function(error) {\r\n            throw new Error(error.data);\r\n          });\r\n      },\r\n      \r\n      loadScriptIncludes: function(element) {\r\n        var scriptIncludeUrl = captchaSettings.captchaEndpoint + '?get=script-include';\r\n        var self = this;\r\n        this.getScript(scriptIncludeUrl, function() {\r\n          var captchaId = element[0].querySelector('#BDC_VCID_' + $rootScope.captchaStyleName).value;\r\n          var initScriptIncludeUrl = captchaSettings.captchaEndpoint + '?get=init-script-include&c=' + $rootScope.captchaStyleName + '&t=' + captchaId + '&cs=200';\r\n          self.getScript(initScriptIncludeUrl);\r\n        });\r\n      }\r\n    };\r\n  }\r\n  \r\n  // <botdetect-captcha> directive element, which is used to display Captcha html markup.\r\n  function botdetectCaptchaDirective($rootScope, $http, captchaSettings, captchaHelper) {\r\n    return {\r\n      restrict: 'E',\r\n      link: function(scope, element, attrs) {\r\n        var styleName = attrs.stylename ? attrs.stylename : 'defaultCaptcha';\r\n\r\n        // save styleName in $rootScope, that will be used in correctCaptcha directive and Captcha service for getting BotDetect instance\r\n        $rootScope.captchaStyleName = styleName;\r\n\r\n        $http({\r\n          method: 'GET',\r\n          url: captchaSettings.captchaEndpoint,\r\n          params: {\r\n            get: 'html',\r\n            c: styleName\r\n          }\r\n        })\r\n          .then(function(response) {\r\n            // show captcha html in view\r\n            element.html(response.data.replace(/<script.*<\\/script>/g, ''));\r\n            \r\n            // load botdetect scripts\r\n            captchaHelper.loadScriptIncludes(element);\r\n          }, function(error) {\r\n            throw new Error(error.data);\r\n          });\r\n      }\r\n    };\r\n  }\r\n\r\n  // 'correct-captcha' directive attribute, which is used to perform ui captcha validaion.\r\n  function correctCaptchaDirective(Captcha) {\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, element, attrs, ctrls) {\r\n        var captcha,\r\n            captchaCode,\r\n            ngModel = ctrls;\r\n\r\n        ngModel.$setValidity('incorrectCaptcha', false);\r\n\r\n        // client-side validate captcha on blur event\r\n        element.bind('blur', function() {\r\n          captchaCode = element.val();\r\n\r\n          if (!captchaCode) {\r\n            return;\r\n          }\r\n\r\n          if (!captcha) {\r\n            captcha = new Captcha();\r\n          }\r\n\r\n          captcha.validate(captchaCode)\r\n            .then(function(isHuman) {\r\n              if (isHuman) {\r\n                // correct captcha code\r\n                ngModel.$setValidity('incorrectCaptcha', true);\r\n              } else {\r\n                // incorrect captcha code\r\n                ngModel.$setValidity('incorrectCaptcha', false);\r\n                captcha.reloadImage();\r\n              }\r\n            });\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  // Captcha client-side instance exposes Captcha workflow functions and values.\r\n  function captchaService($rootScope, $http) {\r\n    var Captcha = function() {\r\n      if (window.botdetect === undefined) {\r\n        throw new Error('Can not create Captcha instance, please put \"new Captcha()\" inside function that will be invoked after form is submitted.');\r\n      }\r\n\r\n      this.captchaStyleName = $rootScope.captchaStyleName;\r\n      this.captchaId = Captcha.getInstance().captchaId;\r\n    };\r\n\r\n    Captcha.getInstance = function() {\r\n      return $rootScope.captchaStyleName\r\n        ? window.botdetect.getInstanceByStyleName($rootScope.captchaStyleName)\r\n        : null;\r\n    };\r\n\r\n    Captcha.prototype.validate = function(captchaCode) {\r\n      var promise = $http({\r\n          method: 'GET',\r\n          url: Captcha.getInstance().validationUrl,\r\n          params: {\r\n            i: captchaCode\r\n          }\r\n        })\r\n          .then(function(response) {\r\n            return response.data;\r\n          }, function(error) {\r\n            return error.data;\r\n          });\r\n\r\n      return promise;\r\n    };\r\n\r\n    Captcha.prototype.reloadImage = function() {\r\n      Captcha.getInstance().reloadImage();\r\n    };\r\n\r\n    return Captcha;\r\n  }\r\n\r\n  angular\r\n    .module('BotDetectCaptcha', [])\r\n    .provider('captchaSettings', captchaSettings)\r\n    .factory('captchaHelper', [\r\n      '$http',\r\n      '$rootScope',\r\n      'captchaSettings',\r\n      captchaHelper\r\n    ])\r\n    .factory('Captcha', [\r\n      '$rootScope',\r\n      '$http',\r\n      captchaService\r\n    ])\r\n    .directive('botdetectCaptcha', [\r\n      '$rootScope',\r\n      '$http',\r\n      'captchaSettings',\r\n      'captchaHelper',\r\n      botdetectCaptchaDirective\r\n    ])\r\n    .directive('correctCaptcha', [\r\n      'Captcha',\r\n      correctCaptchaDirective\r\n    ]);\r\n\r\n})(window.angular);\r\n"]}